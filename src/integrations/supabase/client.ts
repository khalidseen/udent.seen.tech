// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// üîí Security: API Keys are now stored in environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('‚ùå Supabase Configuration Error:', {
    url: SUPABASE_URL ? '‚úÖ Found' : '‚ùå Missing VITE_SUPABASE_URL',
    key: SUPABASE_PUBLISHABLE_KEY ? '‚úÖ Found' : '‚ùå Missing VITE_SUPABASE_ANON_KEY',
    availableVars: Object.keys(import.meta.env).filter(k => k.startsWith('VITE_SUPABASE'))
  });
  
  throw new Error(
    '‚ö†Ô∏è Missing Supabase environment variables!\n' +
    'Please check your .env file and ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set.\n' +
    'Copy .env.example to .env and add your credentials.'
  );
}

console.log('‚úÖ Supabase client initialized successfully');

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'X-Client-Info': 'udent-dental-app',
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Enhanced error handling for common issues
const originalRpc = supabase.rpc.bind(supabase);
supabase.rpc = function(fn: string, args?: Record<string, unknown>, options?: Record<string, unknown>) {
  const result = originalRpc(fn, args, options);
  
  // Ensure we always return a promise
  if (result && typeof result.catch === 'function') {
    return result.catch((error) => {
      // Handle common RPC errors with fallback
      if (error?.code === '500' || error?.message?.includes('500')) {
        console.warn(`RPC function ${fn} failed with 500 error, providing fallback:`, error);
        
        // Return appropriate fallback based on function name
        if (fn === 'get_user_effective_permissions') {
          return { data: [], error: null };
        }
        if (fn === 'get_user_roles') {
          return { data: [], error: null };
        }
        if (fn === 'get_user_accessible_clinics') {
          return { data: [], error: null };
        }
        if (fn === 'switch_user_clinic') {
          return { data: null, error: null };
        }
        
        // Re-throw for other functions
        throw error;
      }
      
      // Re-throw other errors
      throw error;
    });
  }
  
  // Return the result if it's not a promise or doesn't have catch
  return result;
};