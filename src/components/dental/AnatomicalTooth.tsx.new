import React from 'react';
import { Camera, Eye, RotateCcw } from 'lucide-react';
import { cn } from "@/lib/utils";
import { ConditionType, INTERNATIONAL_COLOR_SYSTEM } from "@/types/dental-enhanced";
import { ToothAnatomicalData, PatientToothImage, ToothTemplate } from "@/types/anatomical-dental";

// ๐ผ๏ธ ุฏุงูุฉ ูุฑุจุท ุฃุฑูุงู ุงูุฃุณูุงู ุจุงูุตูุฑ ุงูุญููููุฉ
const getToothImagePath = (toothNumber: string): string | null => {
  // ุชุญููู ุฃุฑูุงู FDI ูููู ุงูุนููู ุงูุฃูุณุฑ ุฅูู ุฃุฑูุงู ุงูุตูุฑ
  const upperLeftMapping: { [key: string]: string } = {
    '11': '1.jpg',
    '12': '2.jpg',
    '13': '3.jpg',
    '14': '4.jpg',
    '15': '5.jpg',
    '16': '6.jpg',
    '17': '7.jpg',
    '18': '8.jpg'
  };

  // ูููู ุฅุถุงูุฉ ุจุงูู ุงูุฃุฌุฒุงุก ูุงุญูุงู:
  // const upperRightMapping: { [key: string]: string } = { ... };
  // const lowerLeftMapping: { [key: string]: string } = { ... };
  // const lowerRightMapping: { [key: string]: string } = { ... };
  
  if (upperLeftMapping[toothNumber]) {
    return `/teeth/U L/${upperLeftMapping[toothNumber]}`;
  }
  
  return null;
};

interface AnatomicalToothProps {
  anatomicalData: ToothAnatomicalData;
  condition: ConditionType;
  templateImage?: ToothTemplate; // ุตูุฑุฉ ุงูุดูู ุงูุฃุณุงุณู ูู ุงูุฃุฏูู
  patientImage?: PatientToothImage; // ุตูุฑุฉ ุงููุฑูุถ ุงููุนููุฉ
  showPatientImage: boolean; // ุงูุชุจุฏูู ุจูู ุตูุฑุฉ ุงููุฑูุถ ูุงูุดูู ุงูุฃุณุงุณู
  onClick: () => void;
  onToggleImageType?: () => void; // ููุชุจุฏูู ุจูู ุฃููุงุน ุงูุตูุฑ
}

export const AnatomicalTooth: React.FC<AnatomicalToothProps> = ({
  anatomicalData,
  condition,
  templateImage,
  patientImage,
  showPatientImage,
  onClick,
  onToggleImageType
}) => {
  const { toothNumber, position, size } = anatomicalData;

  const getConditionColor = (condition: ConditionType) => {
    return INTERNATIONAL_COLOR_SYSTEM[condition] || INTERNATIONAL_COLOR_SYSTEM.sound;
  };

  const getToothSize = () => {
    const baseSize = 40; // ุงูุญุฌู ุงูุฃุณุงุณู
    return baseSize * size;
  };

  const getCurrentImage = () => {
    // ุฃููุงู: ุงูุจุญุซ ุนู ุงูุตูุฑุฉ ุงูุญููููุฉ
    const realToothImage = getToothImagePath(toothNumber);
    if (realToothImage && !showPatientImage) {
      return realToothImage;
    }
    
    // ุซุงููุงู: ุตูุฑุฉ ุงููุฑูุถ ุงููุฑููุนุฉ
    if (showPatientImage && patientImage) {
      return patientImage.imageUrl;
    }
    
    // ุซุงูุซุงู: ุตูุฑุฉ ุงููุงูุจ ูู ุงูุฃุฏูู (fallback)
    if (templateImage && templateImage.imageUrl) {
      return templateImage.imageUrl;
    }
    
    return null;
  };

  const currentImage = getCurrentImage();

  return (
    <div
      className="absolute group cursor-pointer transition-all duration-300 hover:scale-110 hover:z-10"
      style={{
        left: `${position.x}%`,
        top: `${position.y}%`,
        transform: `translate(-50%, -50%) rotate(${position.rotation}deg)`,
        width: `${getToothSize()}px`,
        height: `${getToothSize()}px`
      }}
      onClick={onClick}
    >
      {/* ุฑูู ุงูุณู */}
      <div 
        className="absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-bold text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 px-1 rounded shadow-sm z-20"
        style={{ transform: `translateX(-50%) rotate(-${position.rotation}deg)` }}
      >
        {toothNumber}
      </div>

      {/* ุดูู ุงูุณู */}
      <div className="relative w-full h-full">
        {currentImage ? (
          <img
            src={currentImage}
            alt={`ุงูุณู ${toothNumber}`}
            className={cn(
              "w-full h-full object-contain rounded-lg shadow-lg",
              "border-2 transition-all duration-300",
              condition === ConditionType.SOUND ? "border-green-400" : "border-orange-400",
              "group-hover:border-blue-500 group-hover:shadow-xl"
            )}
          />
        ) : (
          <svg
            viewBox="0 0 24 24"
            className={cn(
              "w-full h-full transition-all duration-300 rounded-lg shadow-lg",
              "group-hover:shadow-xl"
            )}
            fill={getConditionColor(condition)}
          >
            {/* ุดูู ุงูุณู ุงูุงูุชุฑุงุถู */}
            <path d="M12 2C12 2 8 4 8 8V16C8 20 12 22 12 22C12 22 16 20 16 16V8C16 4 12 2 12 2Z" />
          </svg>
        )}

        {/* ูุคุดุฑุงุช ุงูุญุงูุฉ */}
        <div className="absolute top-0 right-0 flex flex-col gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          {/* ูุคุดุฑ ูุฌูุฏ ุตูุฑุฉ ูุฑูุถ */}
          {patientImage && (
            <div className={cn(
              "w-4 h-4 rounded-full bg-green-500 flex items-center justify-center",
              showPatientImage ? "ring-2 ring-white" : ""
            )}>
              <Camera className="w-2 h-2 text-white" />
            </div>
          )}

          {/* ูุคุดุฑ ูุฌูุฏ ุตูุฑุฉ ุญููููุฉ */}
          {getToothImagePath(toothNumber) && (
            <div className={cn(
              "w-4 h-4 rounded-full bg-blue-500 flex items-center justify-center",
              !showPatientImage ? "ring-2 ring-white" : ""
            )}>
              <Eye className="w-2 h-2 text-white" />
            </div>
          )}

          {/* ุฒุฑ ุงูุชุจุฏูู ุจูู ุงูุตูุฑ */}
          {(patientImage || getToothImagePath(toothNumber)) && onToggleImageType && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                onToggleImageType();
              }}
              className="w-4 h-4 bg-purple-500 hover:bg-purple-600 rounded-full flex items-center justify-center transition-colors"
              title="ุชุจุฏูู ุจูู ุงูุตูุฑุฉ ุงูุญููููุฉ ูุตูุฑุฉ ุงููุฑูุถ"
              aria-label="ุชุจุฏูู ุจูู ุตูุฑุฉ ุงููุฑูุถ ูุงูุดูู ุงูุฃุณุงุณู"
            >
              <RotateCcw className="w-2 h-2" />
            </button>
          )}
        </div>

        {/* ูุคุดุฑ ุงูุญุงูุฉ */}
        {condition !== ConditionType.SOUND && (
          <div 
            className="absolute bottom-0 left-0 w-3 h-3 rounded-full"
            style={{ backgroundColor: getConditionColor(condition) }}
          />
        )}
      </div>

      {/* ุชุณููุฉ ููุน ุงูุณู ุนูุฏ ุงูุชูุฑูุฑ */}
      <div className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs text-gray-600 dark:text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity bg-white dark:bg-gray-800 px-2 py-1 rounded shadow-sm whitespace-nowrap">
        ููุน ุงูุณู
      </div>
    </div>
  );
};
